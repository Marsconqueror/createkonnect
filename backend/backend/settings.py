"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from urllib.parse import urlparse
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k7okufm4x5l-bf3i4bq4jo#f*=4)@h&%5rq@mo9(fep&&i))w='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Add these at the top of your settings.py

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'api',
    'channels',
    'corsheaders',
    # Add this if you use BLACKLIST_AFTER_ROTATION
    # 'rest_framework_simplejwt.token_blacklist',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # Should be high up
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware', # Ensure this is present
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# --- CORRECTED REST_FRAMEWORK ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# --- SIMPLE_JWT Configuration (Looks mostly correct) ---
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5), # Keep short
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),  # Can be longer
    "ROTATE_REFRESH_TOKENS": True, # Recommended for better security
    "BLACKLIST_AFTER_ROTATION": True, # Requires installing simplejwt blacklist app and running migrations
    "UPDATE_LAST_LOGIN": True,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY, # Use your Django secret key
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",), # Still useful for testing/other clients
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "api.serializers.CookieTokenObtainPairSerializer", # Correct
    "TOKEN_REFRESH_SERIALIZER": "api.serializers.CookieTokenRefreshSerializer",   # Correct
    # Add blacklist serializer if using blacklisting
    # "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",

    # --- Custom Cookie Settings ---
    # These names must match the keys used in your JWTCookieAuthentication class and Views
    'AUTH_COOKIE_ACCESS_NAME': 'access_token',    # Default: 'access_token'
    'AUTH_COOKIE_REFRESH_NAME': 'refresh_token',   # Default: 'refresh_token'
    'AUTH_COOKIE_SECURE': not DEBUG,              # Use DEBUG directly. True in prod (HTTPS)
    'AUTH_COOKIE_HTTP_ONLY' : True,              # Access/Refresh tokens should be HttpOnly
    'AUTH_COOKIE_PATH': '/',                     # Default: '/'
    'AUTH_COOKIE_DOMAIN': None,                  # Default: None. Set if needed for subdomains
    'AUTH_COOKIE_SAMESITE': 'Strict',             # Default: 'Lax'. 'Strict' is more secure.
    # Path specific for refresh cookie helps security, ensure it matches view/logout logic
    'AUTH_COOKIE_REFRESH_PATH': '/api/token/refresh/',
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "https://localhost:3000",
    "http://192.168.2.240:3000",
    "https://192.168.2.240:3000"
    # Add production frontend origin(s) here
]
CORS_ALLOW_CREDENTIALS = True # Important: Allow cookies for cross-origin requests

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'
ASGI_APPLICATION = 'backend.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

tmpPostgres = urlparse('postgresql://neondb_owner:npg_9CWwmJ1NFEYs@ep-quiet-shape-a1wo8w3d-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': tmpPostgres.path.replace('/', ''),
        'USER': tmpPostgres.username,
        'PASSWORD': tmpPostgres.password,
        'HOST': tmpPostgres.hostname,
        'PORT': 5432, # Default PostgreSQL port
        'OPTIONS': {
             # Add SSL options if required by your DB provider beyond the connection string
             # 'sslmode': 'require', # Usually handled by connection string
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },
    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },
]

AUTH_USER_MODEL = 'api.User'

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True # Important for timezone-aware datetimes like token expiry


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
# Define STATIC_ROOT for collectstatic in production
# STATIC_ROOT = BASE_DIR / 'staticfiles'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email Settings (Looks OK)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False # Typically TLS uses port 587, SSL uses 465. Don't set both to True.
EMAIL_HOST_USER = 'debjit22146@iiitd.ac.in'
EMAIL_HOST_PASSWORD = 'xzmc safh dqlo ngrd' # Consider using environment variables for sensitive info
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER # Use DEFAULT_FROM_EMAIL, not DEFFAULT


# --- CORRECTED CSRF and Security Settings ---
CSRF_COOKIE_HTTPONLY = False # MUST BE FALSE for JavaScript to read the token
CSRF_COOKIE_SECURE = not DEBUG  # Use DEBUG. True in prod (HTTPS)
CSRF_COOKIE_SAMESITE = "Strict" # Or 'Lax'. Stricter is better.
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "https://localhost:3000", # Use https if your local dev server uses it
    "http://192.168.2.240:3000",
    "https://192.168.2.240:3000"
    # Add production frontend origin(s) here
]

# Session Cookie settings (Good defaults)
SESSION_COOKIE_SAMESITE = "Strict"
SESSION_COOKIE_SECURE = not DEBUG # Use DEBUG. True in prod
SESSION_COOKIE_HTTPONLY = True # Session cookies should generally be HttpOnly

# Other Security Headers (Good defaults)
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_SSL_REDIRECT = not DEBUG # Set to True in production to force HTTPS
# SECURE_HSTS_SECONDS = 31536000 # Enable HSTS in production after confirming HTTPS works
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True # If applicable
# SECURE_HSTS_PRELOAD = True # If applicable

SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# --- REMOVE THE DUPLICATE/ERRONEOUS BLOCK THAT WAS AT THE END ---